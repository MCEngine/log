plugins {
    id 'com.github.johnrengelman.shadow' version '8.1.1'
    id 'java'
    id 'maven-publish'
    id 'signing'
}

// Get submodule information, ensuring [version, classifier] are not null
def (artifactVersion, artifactClassifier) = getVersion(project.name)

version = artifactVersion
group = 'io.github.mcengine'

// Function to retrieve the version and classifier for a project
def getVersion(projectName) {
    def version = project.findProperty("${projectName}-version") ?: 'unspecified'
    def classifier = project.findProperty("${projectName}-classifier") ?: 'unspecified'
    return [version, classifier]
}

allprojects {
    group = 'io.github.mcengine'

    apply plugin: 'java'
    apply plugin: 'com.github.johnrengelman.shadow'

    repositories {
        mavenCentral()
        mavenLocal()

        // GitHub Packages repository for MCEngine dependencies
        maven {
            url = uri("https://maven.pkg.github.com/MCEngine/mcengine")
            credentials {
                username = System.getenv("GIT_USERNAME")
                password = System.getenv('MCENGINE_GITHUB_TOKEN_PKG_READ_MCENGINE') ?: 
                          System.getenv('MCENGINE_GITHUB_TOKEN_PKG_READ')
            }
        }

        maven {
            url = 'https://hub.spigotmc.org/nexus/content/repositories/snapshots/'
            content {
                includeGroup 'org.bukkit'
                includeGroup 'org.spigotmc'
            }
        }
        maven { url = 'https://oss.sonatype.org/content/repositories/snapshots' }
        maven { url = 'https://oss.sonatype.org/content/repositories/central' }
    }
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'signing'

    // Disable the default JAR task to avoid conflicts
    tasks.named('jar').configure { enabled = false }

    // Disable shadowJar for excluded projects
    def excludeBuildProjects = [':server']
    if (project.path in excludeBuildProjects) {
        tasks.matching { it.name == 'shadowJar' }.configureEach { enabled = false }
    }

    // Get submodule information
    def (subArtifactVersion, subArtifactClassifier) = getVersion(project.name)
    version = subArtifactVersion

    shadowJar {
        archiveClassifier = subArtifactClassifier
        destinationDirectory.set(file("${rootProject.buildDir}/libs"))
    }

    // Configure dependencies for server-related projects
    if (project.path.startsWith(':server:')) {
        dependencies {
            implementation project(path: ':mcengine-log-api', configuration: 'shadow')
            implementation project(path: ':common', configuration: 'shadow')
        }
    }

    // Bukkit-specific configuration
    if (project.name == 'spigotmc') {
        processResources {
            def props = [version: version]
            inputs.properties(props)
            filteringCharset 'UTF-8'
            filesMatching('plugin.yml') {
                expand(props)
            }
        }
    }

    // Maven publishing configuration for mcengine-api
    if (project.name == 'mcengine-log-api') {
        java {
            withJavadocJar()
            withSourcesJar()
        }

        apply plugin: 'maven-publish'

        publishing {
            repositories {
                maven {
                    name = 'GitHubPackages'
                    url = uri('https://maven.pkg.github.com/MCEngine/log')
                    credentials {
                        username = System.getenv('GIT_USERNAME')
                        password = System.getenv('MCENGINE_GITHUB_TOKEN_PKG_PUBLISH_LOG') ?: 
                                  System.getenv('MCENGINE_GITHUB_TOKEN_PKG_PUBLISH')
                    }
                }
            }
            publications {
                mavenJava(MavenPublication) {
                    artifact(tasks.named('shadowJar').get())
                    artifact(tasks.named('javadocJar').get())
                    artifact(tasks.named('sourcesJar').get())

                    pom {
                        name = 'MCEngine'
                        description = 'An API for MCEngine Project'
                        url = 'https://github.com/MCEngine/log'

                        licenses {
                            license {
                                name = 'The MIT License'
                                url = 'https://github.com/MCEngine/log/blob/master/LICENSE'
                            }
                        }

                        scm {
                            connection = 'scm:git:git://github.com/MCEngine/log.git'
                            developerConnection = 'scm:git:ssh://github.com:MCEngine/log.git'
                            url = 'https://github.com/MCEngine/log'
                        }

                        developers {
                            developer {
                                id = 'jetsadawijit'
                                name = 'Jetsada Wijit'
                                email = 'jetsadawijit@outlook.com'
                                url = 'https://jetsadawijit.github.io'
                            }
                        }
                    }
                }
            }
        }
    }
}

dependencies {
    implementation project(path: ':mcengine-log-api', configuration: 'shadow')
    implementation project(path: ':common', configuration: 'shadow')

    // Include all relevant server subprojects
    rootProject.subprojects.each { subproject ->
        if (subproject.name != 'mcengine-log-api' && subproject.name != 'common') {
            def serverProjectPath = subproject.path.startsWith(':server') ? subproject.path : ":server:${subproject.name}"
            implementation project(path: serverProjectPath, configuration: 'shadow')
        }
    }
}

// Shadow JAR configuration
shadowJar {
    version = artifactVersion
    archiveClassifier = artifactClassifier
    archiveBaseName.set('MCEngineLog')
}

// Disable the default JAR task
tasks.named('jar').configure { enabled = false }

// Ensure the build process depends on shadowJar
build.dependsOn(shadowJar)
